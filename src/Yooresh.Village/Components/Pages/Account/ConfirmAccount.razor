@page "/ConfirmAccount"
@using Yooresh.Village.Models;
@using Yooresh.Village.Models.Accounts
@using Yooresh.Village.Services
@rendermode InteractiveServer
@inject Services.IAccountServices _playerServices;
@inject NavigationManager _navManager

<h3>ConfirmAccount</h3>
<EditForm Model="@ConfirmAccountDto" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />
    <input type="hidden" @bind="ConfirmAccountDto.PlayerId" />
    <div class="form-group">
        <label for="confirmation-code" class="col-sm-2 col-form-label">
            The confirmation code from your Email :
        </label>
        <div class="col-sm-10">
            <InputText id="confirmation-code" class="form-control" placeholder="Example: 12345"
                       @bind-Value="ConfirmAccountDto.ConfirmationCode" />
        </div>
        <ValidationMessage For="@(() => ConfirmAccountDto.ConfirmationCode)" />
    </div>
    <br />
    <button class="btn btn-primary" type="submit">Submit</button>
</EditForm>
<br />
@if (ErrorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @ErrorMessage!
    </div>
}

@code {

    public ConfirmAccountDto ConfirmAccountDto { get; set; } = new();

    private string? ErrorMessage = null;

    protected override void OnInitialized()
    {
        var uri = _navManager.ToAbsoluteUri(_navManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);

        // Assign to model property
        ConfirmAccountDto.PlayerId = Guid.Parse(queryParams["playerId"]);
    }

    private async Task ValidSubmit()
    {
        var result = await _playerServices.ConfirmAccount(ConfirmAccountDto);
        if (result.IsSuccess)
        {
            _navManager.NavigateTo("/login");
        }
        else
        {
            ErrorMessage = result.ErrorMessage;
        }
    }
}
